name: Build & Deploy (Node in ./app → Azure Web App)

on:
  push:
    branches: [ "main" ]
    paths:
      - "app/**"
      - ".github/workflows/deploy-webapp.yml"
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: app-lab001
  NODE_VERSION: "20"

defaults:
  run:
    working-directory: app

jobs:
  build_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure app directory exists
        run: |
          ls -la .
          ls -la app || (echo "ERROR: Pasta 'app/' não existe no repo"; exit 1)
          test -f package.json || (echo "ERROR: app/package.json não encontrado"; exit 1)

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: app/package-lock.json

      - name: Install deps
        run: npm ci || npm install

      - name: Optional build & tests
        run: |
          npm run build --if-present
          npm test --if-present

      - name: Zip artifact
        run: zip -r ../app.zip .

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: app.zip

      - name: Smoke test - /
        shell: bash
        run: |
          URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "Testing $URL"
          for i in {1..30}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            BODY=$(curl -s "$URL" || true)
            echo "HTTP $CODE: $(echo "$BODY" | head -c 200)"
            if [ "$CODE" -eq 200 ] && echo "$BODY" | grep -q "Hello Frontend!"; then exit 0; fi
            sleep 5
          done
          exit 1

      - name: Smoke test - /backend
        shell: bash
        run: |
          URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/backend"
          echo "Testing $URL"
          for i in {1..30}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            BODY=$(curl -s "$URL" || true)
            echo "HTTP $CODE: $(echo "$BODY" | head -c 200)"
            if [ "$CODE" -eq 200 ] && echo "$BODY" | grep -q "Backend says:"; then exit 0; fi
            sleep 5
          done
          exit 1
